// automatically generated by the FlatBuffers compiler, do not modify

package AutoGenConfig

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SingleSheet1ConfigData struct {
	_tab flatbuffers.Table
}

func GetRootAsSingleSheet1ConfigData(buf []byte, offset flatbuffers.UOffsetT) *SingleSheet1ConfigData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SingleSheet1ConfigData{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *SingleSheet1ConfigData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SingleSheet1ConfigData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SingleSheet1ConfigData) ID() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SingleSheet1ConfigData) MutateID(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *SingleSheet1ConfigData) Data1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SingleSheet1ConfigData) Data2() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SingleSheet1ConfigData) MutateData2(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func SingleSheet1ConfigDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func SingleSheet1ConfigDataAddID(builder *flatbuffers.Builder, ID int32) {
	builder.PrependInt32Slot(0, ID, 0)
}
func SingleSheet1ConfigDataAddData1(builder *flatbuffers.Builder, data1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(data1), 0)
}
func SingleSheet1ConfigDataAddData2(builder *flatbuffers.Builder, data2 int32) {
	builder.PrependInt32Slot(2, data2, 0)
}
func SingleSheet1ConfigDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
