// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace AutoGenConfig
{

using global::System;
using global::FlatBuffers;

public struct TalkEachConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static TalkEachConfig GetRootAsTalkEachConfig(ByteBuffer _bb) { return GetRootAsTalkEachConfig(_bb, new TalkEachConfig()); }
  public static TalkEachConfig GetRootAsTalkEachConfig(ByteBuffer _bb, TalkEachConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool TalkEachConfigBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "WHAT"); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public TalkEachConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SingleTalkEachConfigData? Data(int j) { int o = __p.__offset(4); return o != 0 ? (SingleTalkEachConfigData?)(new SingleTalkEachConfigData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<TalkEachConfig> CreateTalkEachConfig(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartObject(1);
    TalkEachConfig.AddData(builder, dataOffset);
    return TalkEachConfig.EndTalkEachConfig(builder);
  }

  public static void StartTalkEachConfig(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<SingleTalkEachConfigData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<TalkEachConfig> EndTalkEachConfig(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<TalkEachConfig>(o);
  }
  public static void FinishTalkEachConfigBuffer(FlatBufferBuilder builder, Offset<TalkEachConfig> offset) { builder.Finish(offset.Value, "WHAT"); }
};

public struct SingleTalkEachConfigData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SingleTalkEachConfigData GetRootAsSingleTalkEachConfigData(ByteBuffer _bb) { return GetRootAsSingleTalkEachConfigData(_bb, new SingleTalkEachConfigData()); }
  public static SingleTalkEachConfigData GetRootAsSingleTalkEachConfigData(ByteBuffer _bb, SingleTalkEachConfigData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SingleTalkEachConfigData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public string Info { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetInfoBytes() { return __p.__vector_as_arraysegment(8); }
  public int Next { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<SingleTalkEachConfigData> CreateSingleTalkEachConfigData(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      StringOffset InfoOffset = default(StringOffset),
      int next = 0) {
    builder.StartObject(4);
    SingleTalkEachConfigData.AddNext(builder, next);
    SingleTalkEachConfigData.AddInfo(builder, InfoOffset);
    SingleTalkEachConfigData.AddName(builder, NameOffset);
    SingleTalkEachConfigData.AddID(builder, ID);
    return SingleTalkEachConfigData.EndSingleTalkEachConfigData(builder);
  }

  public static void StartSingleTalkEachConfigData(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddInfo(FlatBufferBuilder builder, StringOffset InfoOffset) { builder.AddOffset(2, InfoOffset.Value, 0); }
  public static void AddNext(FlatBufferBuilder builder, int next) { builder.AddInt(3, next, 0); }
  public static Offset<SingleTalkEachConfigData> EndSingleTalkEachConfigData(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SingleTalkEachConfigData>(o);
  }
};


}
